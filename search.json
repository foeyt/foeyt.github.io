[{"title":"证明O'Stolz定理","url":"/2025/10/01/%E8%AF%81%E6%98%8EO-Stolz%E5%AE%9A%E7%90%86/","content":"O’Stolz 定理的简单证明\r\nO’Stolz 定理的简单描述\r\n该定理可以认为是 L’Hospital 法则在数列函数上的特殊情况。\r\n$Th1: (\\frac{*}{\\infty})$型: 设数列\r\n{an}, {bn}\r\n满足以下条件:\r\n\r\n{bn}\r\n严格单调递增,且 bn &gt; 0,\r\n$\\lim\\limits_{n\\to \\infty}b_n =\r\n+\\infty$.\r\n\r\n则 $\\lim\\limits_{n\\to\r\n\\infty}\\frac{a_n}{b_n}=\\lim\\limits_{n\\to \\infty}\\frac{a_{n+1} -\r\na_n}{b_{n+1} - b_n}=L$, 其中L为有限数或无穷大量.\r\n$Th2:(\\frac{0}{0}$)型: 设数列 {an}, {bn}\r\n满足以下条件:\r\n\r\n{bn}\r\n严格单调递减且 $\\lim\\limits_{n\\to\r\n\\infty}b_n=0$,\r\n$\\lim\\limits_{n\\to\r\n\\infty}a_n=0$.\r\n\r\n则 $\\lim\\limits_{n\\to\r\n\\infty}\\frac{a_n}{b_n}=\\lim\\limits_{n\\to \\infty}\\frac{a_{n+1} -\r\na_n}{b_{n+1}- b_n}=L$, 其中L为有限数或无穷大量.\r\n\r\n\r\n定理证明\r\n类型一\r\nProve:\r\n由 $\\lim\\limits_{n\\to \\infty}\\frac{a_{n+1}\r\n- a_n}{b_{n+1} - b_n}=L$, 得∀ϵ &gt; 0 ∃N1,\r\n当n &gt; N1时有:\r\n$$\r\n\\begin{flalign}\r\n\\left|\\frac{a_{n+1}-a_n}{b_{n+1}-b_n}-L\\right|&amp;&lt;\\epsilon\\\\\r\n即有，L-\\epsilon&lt;\\frac{a_{n+1}-a_n}{b_{n+1}-b_n}&amp;&lt;L+\\epsilon\r\n\\end{flalign}\r\n$$\r\n∵{bn}严格单调递增，且bn + 1 &gt; bn &gt; 0.\r\n∴ (L − ϵ)(bn + 1 − bn) &lt; an + 1 − an &lt; (L + ϵ)(bn + 1 − bn)\r\n由 $\\lim\\limits_{n\\to\r\n\\infty}b_n=+\\infty$,得∃N2,使得n &gt; N2时,\r\nbn &gt; ϵ &gt; 0.\r\n可得到 $\\lim\\limits_{n\\to\r\n\\infty}\\frac{1}{b_n}=0$.\r\n取 N = max {N1, N2},\r\n则N已确定，当n &gt; N时，有:\r\n$$\r\n\\begin{flalign}\r\n(L-\\epsilon)(b_{N+2}-b_{N+1})&lt;a_{N+2}-a_{N+1}&amp;&lt;(L+\\epsilon)(b_{N+2}-b_{N+1})\\\\\r\n(L-\\epsilon)(b_{N+3}-b_{N+2})&lt;a_{N+3}-a_{N+2}&amp;&lt;(L+\\epsilon)(b_{N+3}-b_{N+2})\\\\\r\n&amp;...\\\\\\\\\r\n(L-\\epsilon)(b_{n+1}-b_n)&lt;a_{n+1}-a_n&amp;&lt;(L+\\epsilon)(b_{n+1}-b_n)\r\n\\end{flalign}\r\n$$\r\n将上式累加得到:\r\n$$\r\n\\begin{flalign}\r\n(L-\\epsilon)(b_{n+1}-b_{N+1})&lt;a_{n+1}-a_{N+1}&amp;&lt;(L+\\epsilon)(b_{n+1}-b_{N+1})\\\\\\\\\r\n即有L-\\epsilon&lt;\\frac{a_{n+1}-a_{N+1}}{b_{n+1}-b_{N+1}}&amp;&lt;L+\\epsilon\\\\\\\\\r\n化为L-\\epsilon&lt;\\frac{\\frac{a_{n+1}}{b_{n+1}}-\\frac{a_{N+1}}{b_{n+1}}}{1-\\frac{b_{N+1}}{b_{n+1}}}&amp;&lt;L+\\epsilon\\\\\\\\\r\n则\\left|\\frac{\\frac{a_{n+1}}{b_{n+1}}-\\frac{a_{N+1}}{b_{n+1}}}{1-\\frac{b_{N+1}}{b_{n+1}}}-L\\right|&amp;&lt;\\epsilon\r\n\\end{flalign}\r\n$$\r\n故 $\\lim\\limits_{n\\to\r\n\\infty}\\frac{\\frac{a_{n+1}}{b_{n+1}}-\\frac{a_{N+1}}{b_{n+1}}}{1-\\frac{b_{N+1}}{b_{n+1}}}=L$.\r\n而对上述极限利用极限性质进行拆分可得到:\r\n$$\r\n\\begin{flalign}\r\n&amp;\\lim\\limits_{n\\to\r\n\\infty}\\frac{\\frac{a_{n+1}}{b_{n+1}}-\\frac{a_{N+1}}{b_{n+1}}}{1-\\frac{b_{N+1}}{b_{n+1}}}\\\\\r\n=&amp;\\frac{\\lim\\limits_{n\\to\r\n\\infty}\\frac{a_{n+1}}{b_{n+1}}-a_{N+1}\\lim\\limits_{n\\to\r\n\\infty}\\frac{1}{b_{n+1}}}{1-b_{N+1}\\lim\\limits_{n\\to\r\n\\infty}\\frac{1}{b_{n+1}}}\\\\\r\n=&amp;\\frac{\\lim\\limits_{n\\to \\infty}\\frac{a_{n+1}}{b_{n+1}}-0}{1-0}\\\\\r\n=&amp;\\lim\\limits_{n\\to \\infty}\\frac{a_{n+1}}{b_{n+1}}\\\\\r\n=&amp;L\r\n\\end{flalign}\r\n$$\r\n即 $\\lim\\limits_{n\\to\r\n\\infty}\\frac{a_n}{b_n}=L$.\r\n证毕。\r\n类型二\r\nProve:\r\n得条件 $\\lim\\limits_{n\\to\r\n\\infty}a_n=0,\\lim\\limits_{n\\to \\infty}b_n=0$ 且{bn}严格单调递减\r\n.\r\n令 cn = an − Lbn,\r\n则 $\\lim\\limits_{n\\to\r\n\\infty}c_n=0$.\r\n当 ∀ϵ &gt; 0, ∃N使得 n ≥ N 时有: $$\r\n\\begin{flalign}\r\n\\left|\\frac{a_{n+1}-a_n}{b_{n+1}-b_n}-L\\right|&amp;&lt;\\epsilon\\\\\r\n即，\\left|a_{n+1}-a_n-L(b_{n+1}-b_n)\\right|&amp;&lt;\\epsilon\\left|b_{n+1}-b_n\\right|\\\\\r\n则，\\left|c_{n+1}-c_n\\right|&amp;&lt;\\epsilon\\left|b_{n+1}-b_n\\right|\r\n\\end{flalign}\r\n$$ ∵{bn}\r\n严格单调递减，∴ |cn + 1 − cn| &lt; ϵ(bn + 1 − bn).\r\n∀n &gt; m ≥ N（即m此时唯一确定）\r\n由三角不等式得到: $$\r\n\\begin{flalign}\r\n&amp;\\left|c_n-c_m\\right|\\\\\r\n=&amp;\\left|\\sum_{k=m}^{n-1}(c_{k+1}-c_k)\\right|\\\\\r\n\\leq&amp;\\sum_{k=m}^{n-1}\\left|c_{k+1}-c_k\\right|\\\\\r\n&lt;&amp;\\epsilon\\sum_{k=m}^{n-1}(b_k-b_{k+1})\\\\\r\n=&amp;\\epsilon(b_m-b_n)\r\n\\end{flalign}\r\n$$ 不妨令 n → ∞, 由\r\ncn → 0, bn → 0, bn &gt; 0\r\n得:\r\n|−cm| ≤ ϵbm,\r\n即 |cm| ≤ ϵbm,\r\n故 $\\forall m\\geq\r\nN,\\left|\\frac{c_m}{b_m}\\right|&lt;\\epsilon$.\r\n即 $\\lim\\limits_{n\\to\r\n\\infty}\\frac{c_m}{b_m}=0，\\lim\\limits_{n\\to\r\n\\infty}\\frac{a_m-Lb_m}{b_m}=0，\\lim\\limits_{n\\to\r\n\\infty}\\frac{a_m}{b_m}=0$.\r\n综上 $\\lim\\limits_{n\\to\r\n\\infty}\\frac{a_n}{b_n}=L$.\r\n证毕。\r\n\r\n例题\r\n\r\ne.g. 求极限 $\\lim\\limits_{n\\to\r\n\\infty}\\frac{1+\\sqrt{2}+\\cdots+\\sqrt[n]{n}}{n}$\r\n\r\n​ 解: $$\r\n\\begin{flalign}\r\n&amp;\\lim\\limits_{n\\to\r\n\\infty}\\frac{\\sum_{i}^{n+1}\\sqrt[i]{i}-\\sum_{j}^{n}\\sqrt[j]{j}}{\\sum_{i}^{n+1}i-\\sum_{j}^{n}j}\\\\\r\n=&amp;\\lim\\limits_{n\\to \\infty}\\frac{\\sqrt[n+1]{n+1}}{1}\\\\\r\n=&amp;\\lim\\limits_{n\\to \\infty}\\sqrt[n+1]{n+1}\\\\\r\n=&amp;1\\\\\r\n\\\\\r\n&amp;\\lim\\limits_{n\\to \\infty}\\frac{1+\\sqrt{2}+\\cdots+\\sqrt[n]{n}}{n} =\r\n1\r\n\\end{flalign}\r\n$$ ​ 注: 一个重要极限 $\\lim\\limits_{n\\to\r\n\\infty}\\sqrt[n]{n}=1$\r\n\r\n\r\ne.g. 设 xn &gt; 0, 且\r\n$\\lim\\limits_{n\\to\r\n\\infty}\\frac{x_{n+1}}{x_n}=r$, 证明 $\\lim\\limits_{n\\to\r\n\\infty}\\sqrt[n]{x_n}=r$\r\n\r\n​ Prove:\r\n​ 利用同构思想，构建 $\\sqrt[n]{x_n}=x_n^\\frac{1}{n}=e^{\\frac{\\ln\r\nx_n}{n}}$。\r\n​ 则有 $$\r\n\\begin{flalign}\r\n&amp;\\lim\\limits_{n\\to \\infty}\\ln \\frac{x_{n+1}}{x_n}\\\\\r\n=&amp;\\lim\\limits_{n\\to \\infty}(\\ln x_{n+1}-\\ln x_n)\\\\\r\n=&amp;\\lim\\limits_{n\\to \\infty}\\ln x_{n+1}-\\lim\\limits_{n\\to \\infty}\\ln\r\nx_n\\\\\r\n=&amp;\\ln\\lim\\limits_{n\\to \\infty}\\frac{x_{n+1}}{x_n}\\\\\r\n=&amp;\\ln r\r\n\\end{flalign}\r\n$$ ​ 故有 $$\r\n\\begin{flalign}\r\n&amp;\\lim\\limits_{n\\to \\infty}\\frac{\\ln x_n}{n}\\\\\r\n=&amp;\\lim\\limits_{n\\to \\infty}\\frac{\\ln x_{n+1}-\\ln x}{n+1-n}\\\\\r\n=&amp;\\lim\\limits_{n\\to \\infty}\\ln (x_{n+1}-\\ln x)\\\\\r\n=&amp;\\ln r\r\n\\end{flalign}\r\n$$ ​ 则 $\\lim\\limits_{n\\to\r\n\\infty}\\sqrt[n]{x_n}=\\lim\\limits_{n\\to \\infty}e^{\\frac{\\ln\r\nx_n}{n}}=e^{\\lim\\limits_{n\\to \\infty}\\frac{\\ln x_n}{n}}=e^{\\ln\r\nr}=r$\r\n​ 证毕。\r\n​ 注: 两个重要结论 $\\lim\\limits_{n\\to\r\n\\infty}e^{a_n}=e^{\\lim\\limits_{n\\to \\infty} a_n}$, $\\lim\\limits_{n\\to \\infty}\\ln a_n=\\ln\r\n\\lim\\limits_{n\\to \\infty}a_n$\r\n注注: 也许某一天会给出上述两个重要结论的证明，先鸽了（咕咕）。\r\n","categories":["微积分I"],"tags":["微积分","数学","极限"]},{"title":"C 语言实现 sin(x) 的泰勒展开，同时贯彻递归思想","url":"/2025/10/05/C-%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0-sin-x-%E7%9A%84%E6%B3%B0%E5%8B%92%E5%B1%95%E5%BC%80%EF%BC%8C%E5%90%8C%E6%97%B6%E8%B4%AF%E5%BD%BB%E9%80%92%E5%BD%92%E6%80%9D%E6%83%B3/","content":"C 语言实现 sin(x)\r\n的泰勒展开，同时贯彻递归思想\r\n过去布置的一道算法作业，网上许多用到的是循环思路，这里给出用递归解决的方案。\r\n接触 C\r\n语言不多，所以写的感觉有些冗长，用到了许多三元运算符来保证代码行数不要太多，能精简多少是多少。\r\n首先先说明一下 sin(x) 的泰勒展开（这里其实是麦克劳林公式）。 $$\r\n\\begin{flalign}\r\n\\sin x = 1-\\frac{x^3}{3!}+\\frac{x^5}{5!}-\\cdots=\\sum_{i=0,i\\in\r\n\\mathbb{N}}^{+\\infty}(-1)^n\\frac{x^{2n+1}}{(2n+1)!}\r\n\\end{flalign}\r\n$$\r\n\r\n二话不说先上全部代码！\r\n#include &lt;stdio.h&gt;#define calculate(x) taylor(x, 1)unsigned long long int gammaFunction(unsigned int x)&#123;      return (x == 0) ? 1 : ((unsigned long long int) x * gammaFunction(x - 1));&#125;double power(double x, unsigned int y)&#123;    double r = x;    if (y != 0)    &#123;        for(unsigned int i = 0; i &lt; y - 1; i++)            r *= x;    &#125;    else r = 1;    return r;&#125;double absoluteValue(double x)&#123;    return (x &gt;= 0) ? x : (-x);&#125;double taylor(double x, unsigned int n)&#123;    double formla = (power(x, n)) / (gammaFunction(n));    if (absoluteValue(formla &lt; 1e-7)) return formla;    (n % 2 == 0) ? (formla = formla + taylor(x, n + 2)) : (formla = formla - taylor(x, n + 2));    n++;    return formla;&#125;int main()&#123;    double x;    scanf(&quot;%lf&quot;, &amp;x);    printf(&quot;Result: %lf&quot;, calculate(x));    return 0;&#125;\r\n下面开始逐步解释\r\n\r\n阶乘的计算\r\nunsigned long long int gammaFunction(unsigned int x)&#123;      return (x == 0) ? 1 : ((unsigned long long int) x * gammaFunction(x - 1));&#125;\r\n阶乘计算这里用到了 Euler 发现的 Gamma\r\n函数，该函数自带递归性质，于是这里用同样的递归思路解决问题。\r\n用到了三元操作符来排除输入为 0 的特殊情况。\r\nGamma 函数的递归性质如下 $$\r\n\\begin{flalign}\r\n\\Gamma(x)=x\\cdot\\Gamma(x-1)=x(x-1)\\cdot\\Gamma(x-2)=\\cdots=x!\r\n\\end{flalign}\r\n$$\r\n\r\n幂的计算\r\ndouble power(double x, unsigned int y)&#123;    double r = x;    if (y != 0)    &#123;        for(unsigned int i = 0; i &lt; y - 1; i++)            r *= x;    &#125;    else r = 1;    return r;&#125;\r\n这里还是用了 for\r\n循环，我后来想了下可以用递归实现，但是懒得改代码了，读者可以自行尝试下。\r\n同样用 if-else 语句排除输入 x 为 0 的特殊情况。\r\n这里 i &lt; y - 1 的原因是这样的，假设我要算 4\r\n次方幂，输入 y = 4，下面的 for 循环会执行 5\r\n次（0、1、2、3、4），实际上是 5 次方幂，另一个解决方案是\r\nint i = 1。一开始写的时候没想到这个 bug，后来 debug\r\n的时候才发现（😓）。\r\n","categories":["计算机程序设计(C)"],"tags":["编程","算法","C"]}]